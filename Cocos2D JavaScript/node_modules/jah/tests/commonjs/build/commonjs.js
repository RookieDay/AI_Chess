(function(){
__jah__.resources["/main.js"] = {data: function (exports, require, module, __filename, __dirname) {
"use strict";

var container = document.getElementById('commonjs-test-log');
container.className = 'logs';

var logNum = 0;
while (container.firstChild) {
    container.removeChild(container.firstChild);
}

exports.main = function () {
    var tests = [
        '/tests/modules/1.0/absolute',
        '/tests/modules/1.0/cyclic',
        '/tests/modules/1.0/determinism',
        '/tests/modules/1.0/exactExports',
        '/tests/modules/1.0/hasOwnProperty',
        '/tests/modules/1.0/method',
        '/tests/modules/1.0/missing',
        '/tests/modules/1.0/monkeys',
        '/tests/modules/1.0/nested',
        '/tests/modules/1.0/relative',
        '/tests/modules/1.0/transitive'
    ];

    var i = 0;
    function nextTest() {
        var test = tests[i];

        window.print = function (msg, tag) {
            if (tag == 'info') {
                return;
            }
            var div = document.createElement('div')
              , testName = test.split('/').pop();
            logNum++;
            div.appendChild(document.createTextNode(logNum + ' (' + testName + '): ' +  msg));
            div.className = 'log ' + tag;
            container.appendChild(div);
            container.scrollTop = container.offsetHeight;
        };




        require.paths.push(test);
        require('program');
        require.paths.splice(require.paths.indexOf(test), 1);
        i++;
        if (i < tests.length) {
            setTimeout(nextTest, 1);
        }
    }
    nextTest();
}

}} // END: /main.js


__jah__.resources["/tests/modules/1.0/absolute/b.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function() {};

}} // END: /tests/modules/1.0/absolute/b.js


__jah__.resources["/tests/modules/1.0/absolute/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var a = require('submodule/a');
var b = require('b');
test.assert(a.foo().foo === b.foo, 'require works with absolute identifiers');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/absolute/program.js


__jah__.resources["/tests/modules/1.0/absolute/submodule/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function () {
    return require('b');
};

}} // END: /tests/modules/1.0/absolute/submodule/a.js


__jah__.resources["/tests/modules/1.0/absolute/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/absolute/test.js


__jah__.resources["/tests/modules/1.0/cyclic/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.a = function () {
    return b;
};
var b = require('b');

}} // END: /tests/modules/1.0/cyclic/a.js


__jah__.resources["/tests/modules/1.0/cyclic/b.js"] = {data: function (exports, require, module, __filename, __dirname) {
var a = require('a');
exports.b = function () {
    return a;
};

}} // END: /tests/modules/1.0/cyclic/b.js


__jah__.resources["/tests/modules/1.0/cyclic/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var a = require('a');
var b = require('b');

test.assert(a.a, 'a exists');
test.assert(b.b, 'b exists')
test.assert(a.a().b === b.b, 'a gets b');
test.assert(b.b().a === a.a, 'b gets a');

test.print('DONE', 'info');

}} // END: /tests/modules/1.0/cyclic/program.js


__jah__.resources["/tests/modules/1.0/cyclic/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/cyclic/test.js


__jah__.resources["/tests/modules/1.0/determinism/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
require('submodule/a');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/determinism/program.js


__jah__.resources["/tests/modules/1.0/determinism/submodule/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var pass = false;
var test = require('test');
try {
    require('a');
} catch (exception) {
    pass = true;
}
test.assert(pass, 'require does not fall back to relative modules when absolutes are not available.')

}} // END: /tests/modules/1.0/determinism/submodule/a.js


__jah__.resources["/tests/modules/1.0/determinism/submodule/b.js"] = {data: function (exports, require, module, __filename, __dirname) {



}} // END: /tests/modules/1.0/determinism/submodule/b.js


__jah__.resources["/tests/modules/1.0/determinism/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/determinism/test.js


__jah__.resources["/tests/modules/1.0/exactExports/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.program = function () {
    return require('program');
};

}} // END: /tests/modules/1.0/exactExports/a.js


__jah__.resources["/tests/modules/1.0/exactExports/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var a = require('a');
test.assert(a.program() === exports, 'exact exports');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/exactExports/program.js


__jah__.resources["/tests/modules/1.0/exactExports/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/exactExports/test.js


__jah__.resources["/tests/modules/1.0/hasOwnProperty/hasOwnProperty.js"] = {data: function (exports, require, module, __filename, __dirname) {

}} // END: /tests/modules/1.0/hasOwnProperty/hasOwnProperty.js


__jah__.resources["/tests/modules/1.0/hasOwnProperty/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var hasOwnProperty = require('hasOwnProperty');
var toString = require('toString');
var test = require('test');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/hasOwnProperty/program.js


__jah__.resources["/tests/modules/1.0/hasOwnProperty/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/hasOwnProperty/test.js


__jah__.resources["/tests/modules/1.0/hasOwnProperty/toString.js"] = {data: function (exports, require, module, __filename, __dirname) {

}} // END: /tests/modules/1.0/hasOwnProperty/toString.js


__jah__.resources["/tests/modules/1.0/method/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function () {
    return this;
};
exports.set = function (x) {
    this.x = x;
};
exports.get = function () {
    return this.x;
};
exports.getClosed = function () {
    return exports.x;
};

}} // END: /tests/modules/1.0/method/a.js


__jah__.resources["/tests/modules/1.0/method/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var a = require('a');
var foo = a.foo;
test.assert(a.foo() == a, 'calling a module member');
test.assert(foo() == (function (){return this})(), 'members not implicitly bound');
a.set(10);
test.assert(a.get() == 10, 'get and set')
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/method/program.js


__jah__.resources["/tests/modules/1.0/method/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/method/test.js


__jah__.resources["/tests/modules/1.0/missing/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
try {
    require('bogus');
    test.print('FAIL require throws error when module missing', 'fail');
} catch (exception) {
    test.print('PASS require throws error when module missing', 'pass');
}
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/missing/program.js


__jah__.resources["/tests/modules/1.0/missing/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/missing/test.js


__jah__.resources["/tests/modules/1.0/monkeys/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
require('program').monkey = 10;

}} // END: /tests/modules/1.0/monkeys/a.js


__jah__.resources["/tests/modules/1.0/monkeys/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var a = require('a');
var test = require('test');
test.assert(exports.monkey == 10, 'monkeys permitted');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/monkeys/program.js


__jah__.resources["/tests/modules/1.0/monkeys/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/monkeys/test.js


__jah__.resources["/tests/modules/1.0/nested/a/b/c/d.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function () {
    return 1;
};

}} // END: /tests/modules/1.0/nested/a/b/c/d.js


__jah__.resources["/tests/modules/1.0/nested/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
test.assert(require('a/b/c/d').foo() == 1, 'nested module identifier');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/nested/program.js


__jah__.resources["/tests/modules/1.0/nested/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/nested/test.js


__jah__.resources["/tests/modules/1.0/relative/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
var a = require('submodule/a');
var b = require('submodule/b');
test.assert(a.foo == b.foo, 'a and b share foo through a relative require');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/relative/program.js


__jah__.resources["/tests/modules/1.0/relative/submodule/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = require('./b').foo;

}} // END: /tests/modules/1.0/relative/submodule/a.js


__jah__.resources["/tests/modules/1.0/relative/submodule/b.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function () {
};

}} // END: /tests/modules/1.0/relative/submodule/b.js


__jah__.resources["/tests/modules/1.0/relative/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/relative/test.js


__jah__.resources["/tests/modules/1.0/transitive/a.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = require('b').foo;

}} // END: /tests/modules/1.0/transitive/a.js


__jah__.resources["/tests/modules/1.0/transitive/b.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = require('c').foo;

}} // END: /tests/modules/1.0/transitive/b.js


__jah__.resources["/tests/modules/1.0/transitive/c.js"] = {data: function (exports, require, module, __filename, __dirname) {
exports.foo = function () {
    return 1;
};

}} // END: /tests/modules/1.0/transitive/c.js


__jah__.resources["/tests/modules/1.0/transitive/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
var test = require('test');
test.assert(require('a').foo() == 1, 'transitive');
test.print('DONE', 'info');

}} // END: /tests/modules/1.0/transitive/program.js


__jah__.resources["/tests/modules/1.0/transitive/test.js"] = {data: function (exports, require, module, __filename, __dirname) {

exports.print = typeof print !== "undefined" ? print : function () {
    var system = require("system");
    var stdio = system.stdio;
    stdio.print.apply(stdio, arguments);
};

exports.assert = function (guard, message) {
    if (guard) {
        exports.print('PASS ' + message, 'pass');
    } else {
        exports.print('FAIL ' + message, 'fail');
    }
};


}} // END: /tests/modules/1.0/transitive/test.js


__jah__.resources["/tests/unit-testing/1.0/program.js"] = {data: function (exports, require, module, __filename, __dirname) {
// From Node.js test/mjsunit/test-assert.js
// Felix Geisendörfer (felixge), backported from NodeJS
// Karl Guertin (greyrest), backported from NodeJS
// Kris Kowal (kriskowal), conversion to CommonJS

// strangely meta, no?

var assert = require('assert');

function makeBlock(f) {
    var args = Array.prototype.slice.call(arguments,1);
    return function(){
        return f.apply(this, args);
    }
}

exports['test AssertionError instanceof Error'] = function () {
    assert.ok(new assert.AssertionError({}) instanceof Error);
};

exports['test ok false'] = function () {
    assert['throws'](makeBlock(assert.ok, false), assert.AssertionError);
};

exports['test ok(true)'] = makeBlock(assert.ok, true);
exports['test ok("test")'] = makeBlock(assert.ok, "test");
exports['test equal true false'] = function () {
    assert['throws'](makeBlock(assert.equal, true, false), assert.AssertionError, 'equal');
};

exports['test equal null null'] = makeBlock(assert.equal, null, null);
exports['test equal undefined undefined'] = makeBlock(assert.equal, undefined, undefined);
exports['test equal null undefined'] = makeBlock(assert.equal, null, undefined);
exports['test equal 2 "2"'] = makeBlock(assert.equal, 2, "2");
exports['test equal "2" 2'] = makeBlock(assert.equal, "2", 2);
exports['test equal true true'] = makeBlock(assert.equal, true, true);
exports['test notEqual true false'] = makeBlock(assert.notEqual, true, false);
exports['test notEqual true true'] = function () {
    assert['throws'](makeBlock(assert.notEqual, true, true), assert.AssertionError, 'notEqual');
};
exports['test strictEqual 2 "2"'] = function () {
    assert['throws'](makeBlock(assert.strictEqual, 2, "2"), assert.AssertionError, 'strictEqual');
};
exports['test strictEqual null undefined'] = function () {
    assert['throws'](makeBlock(assert.strictEqual, null, undefined), assert.AssertionError, 'strictEqual');
};
exports['test notStrictEqual 2 "2"'] = makeBlock(assert.notStrictEqual, 2, "2");

//deepEquals

//7.2
exports['test 7.2 deepEqual date'] = makeBlock(assert.deepEqual, new Date(2000,3,14), new Date(2000,3,14));
exports['test 7.2 deepEqual date negative'] = function () {
    assert['throws'](makeBlock(assert.deepEqual, new Date(), new Date(2000,3,14)), assert.AssertionError, 'deepEqual date');
};

//7.3
exports['test 7.3 deepEqual 4 "4"'] = makeBlock(assert.deepEqual, 4, "4");
exports['test 7.3 deepEqual "4" 4'] = makeBlock(assert.deepEqual, "4", 4);
exports['test 7.3 deepEqual true 1'] = makeBlock(assert.deepEqual, true, 1);
exports['test 7.3 deepEqual 4 "5"'] = function () {
    assert['throws'](makeBlock(assert.deepEqual, 4, "5"));
};

//7.4
// having the same number of owned properties && the same set of keys
exports['test 7.4 deepEqual {a:4} {a:4}'] = makeBlock(assert.deepEqual, {a:4}, {a:4});
exports['test 7.4 deepEqual {a:4,b:"2"} {a:4,b:"2"}'] = makeBlock(assert.deepEqual, {a:4,b:"2"}, {a:4,b:"2"});
exports['test 7.4 deepEqual [4] ["4"]'] = makeBlock(assert.deepEqual, [4], ["4"]);
exports['test 7.4 deepEqual {a:4} {a:4,b:true}'] = function () {
    assert['throws'](makeBlock(assert.deepEqual, {a:4}, {a:4,b:true}), assert.AssertionError);
};

exports['test deepEqual ["a"], {0:"a"}'] = makeBlock(assert.deepEqual, ["a"], {0:"a"});
//(although not necessarily the same order),
exports['test deepEqual {a:4,b:"1"} {b:"1",a:4}'] = makeBlock(assert.deepEqual, {a:4,b:"1"}, {b:"1",a:4});

exports['test deepEqual arrays with non-numeric properties'] = function () {
    var a1 = [1,2,3];
    var a2 = [1,2,3];
    a1.a = "test";
    a1.b = true;
    a2.b = true;
    a2.a = "test"
    assert['throws'](makeBlock(assert.deepEqual, Object.keys(a1), Object.keys(a2)), assert.AssertionError);
    makeBlock(assert.deepEqual, a1, a2);
};

exports['test deepEqual identical prototype'] = function () {
    // having an identical prototype property
    var nbRoot = {
        toString: function(){return this.first+' '+this.last;}
    }
    var nameBuilder = function(first,last){
        this.first = first;
        this.last = last;
        return this;
    }
    nameBuilder.prototype = nbRoot;
    var nameBuilder2 = function(first,last){
        this.first = first;
        this.last = last;
        return this;
    }
    nameBuilder2.prototype = nbRoot;
    var nb1 = new nameBuilder('Ryan', 'Dahl');
    var nb2 = new nameBuilder2('Ryan','Dahl');

    assert.deepEqual(nb1, nb2);

    nameBuilder2.prototype = Object;
    nb2 = new nameBuilder2('Ryan','Dahl');
    assert['throws'](makeBlock(assert.deepEqual, nb1, nb2), assert.AssertionError);

};

exports['test deepEqual "a" {}'] = function () {
    assert['throws'](makeBlock(assert.deepEqual, 'a', {}), assert.AssertionError);
};

exports['test deepEqual "" ""'] = function () {
    assert.deepEqual("", "");
};

exports['test deepEqual "" [""]'] = function () {
    assert['throws'](makeBlock(assert.deepEqual, '', ['']), assert.AssertionError);
};

exports['test deepEqual [""] [""]'] = function () {
    assert.deepEqual([""], [""]);
};

exports['test throw AssertionError'] = function () {

    //Testing the throwing
    function thrower(errorConstructor){
        throw new errorConstructor('test');
    }
    var aethrow = makeBlock(thrower, assert.AssertionError);
    var aethrow = makeBlock(thrower, assert.AssertionError);
    //the basic calls work
    assert['throws'](makeBlock(thrower, assert.AssertionError), assert.AssertionError, 'message');
    assert['throws'](makeBlock(thrower, assert.AssertionError), assert.AssertionError);
    assert['throws'](makeBlock(thrower, assert.AssertionError));
    //if not passing an error, catch all.
    assert['throws'](makeBlock(thrower, TypeError));
    //when passing a type, only catch errors of the appropriate type
    var threw = false;
    try {
        assert['throws'](makeBlock(thrower, TypeError), assert.AssertionError);
    } catch (e) {
        threw = true;
        assert.ok(e instanceof TypeError, 'type');
    }
    assert.ok(threw, 'assert.throws with an explicit error is eating extra errors', assert.AssertionError);
    threw = false;

};

if (module == require.main)
    require("test").run(exports);


}} // END: /tests/unit-testing/1.0/program.js


})();